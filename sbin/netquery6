#!/usr/bin/perl -CSDAL

use warnings;
use strict;
use Getopt::Long qw(:config no_ignore_case);
use JSON;
use List::Util qw(uniq);
use Net::IP;
use Regexp::IPv6;
use Stsbl::IServ::Net::IPv6;

Getopt::Long::Configure("bundling");

my $fn_iserv_cfg = "/var/lib/iserv/config/config.pm";
my %lan_interfaces;

my $conf;

if (-r $fn_iserv_cfg)
{
  $conf = (require $fn_iserv_cfg);
}

if (defined $conf->{LANInterfaces})
{
  %lan_interfaces = map { $_ => 1 } @{ $conf->{LANInterfaces} };
}

my $m_if = qr/[\w.-]+/;
my $m_hex = qr/[0-9a-f]{2}/;
my $m_mac = qr/$m_hex(?::$m_hex){5}/;
my $m_scope = qr/global|link|host/;
my $m_ip6 = qr/$Regexp::IPv6::IPv6_re/;
my $m_ip4 = qr/\d{1,3}(?:\.\d{1,3}){3}/;

my @out;
my %opt;

GetOptions(\%opt,
  "format|f=s",
  "help|h",
  "global|g",
  "interface|i=s@",
  "lan|l",
  "linklocal|p",
  "nonl|n",
  "uniquelocal|u",
  "quiet|q",
  "wan|w"
) or $opt{help} = 1;

$opt{format} //= shift @ARGV // "ip/bits";
my %interfaces = map { $_ => 1 } @{ $opt{interface} };
$opt{interface} = \%interfaces;

my $count = grep { exists $opt{$_} } ("global", "linklocal", "uniquelocal");

# display all by default
if ($count < 1)
{
  $opt{global} = 1;
  $opt{linklocal} = 1;
  $opt{uniquelocal} = 1;
}

warn "You shall not combine --wan and --lan!\n\n" and $opt{help} = 1 if $opt{lan} and $opt{wan};

print <<USAGE and exit if $opt{help};
Usage: netquery6 [options] [format]

Options
  -f=<format>, --format=<format>        Format to print (see below).
  -g,          --global                 only print global addresses.
  -h,          --help                   Show this help.
  -i=<nic>,    --interface=<nic>        Only print addresses assigned to this
                                        network interface.
  -l,          --lan                    Only print addresses of interfaces.
                                        Mutually exclusive with --wan.
  -n,          --nonl                   Do not output trailing newline.
  -p,          --linklocal              Only print link-local addresses.
  -u,          --uniquelocal            Only print unique-local addresses.
  -q,          --quiet                  Do not output anything.
  -w,          --wan                    Only print addresses of interfaces which
                                        are not marked as LAN.
                                        Mutually exclusive with --lan.
Format         default: ip/bits
  ip           full IP address
  net          The network according to network mask/CIDR.
  prefix       **Deprecated**. Alias for net.
  bits         Set bits in network mask
  length       **Deprecated**. Alias for bits.
  scope        Scope of address (linklocal or global).
  mac          Hardware address of interface
  nic          Network interface card
  valid        Until when (UNIX timestamp) is the address still valid.
  preferred    Until when (UNIX timestamp) is the address still preferred.
  valleft      How many seconds is the address still valid.
  prefleft     How many seconds is the address still preferred.
  iid          The interface identifier part of the address.
  suffix       **Deprecated**. Alias for iid.

Any other string will be copied into the result unmodified.

CAUTION: You must sanity check netquery output. If a field such as the broadcast
address is not available the fieldname will be passed through and printed.

Either --format as option or to supply the format as regular argument after
option is allowed. If no matching addresses are found, netquery6 returns
exit code 1.
USAGE

exit 1 
  if $opt{lan} and not keys %lan_interfaces;


sub ip_in_net($$)
{
  my ($net, $ip) = @_;

  $net = new Net::IP($net);
  $ip = new Net::IP($ip);

  $net->overlaps($ip, $net) eq $Net::IP::IP_B_IN_A_OVERLAP;
}

my $data = decode_json qx(/sbin/ip --json address show up);

for my $row (@{$data})
{
  # loopback -> ignore because lo is often handled specially
  # sit -> ignore because it only contains information about tunnel endpoints
  # tun* is shown as link/none -> ignore because dynamic
  # docker*/veth* -> ignore because Docker is out of scope for IPv6 at now
  unless (
      !defined $row->{ifname} or
      ($row->{link_type} =~ /^(loopback|none|sit)$/) or
      $row->{ifname} =~ /^docker|^veth/ or
      (keys %{ $opt{interface} } != 0 and not exists $opt{interface}->{$row->{ifname}}))
  {
    my %nic_fields = ();
    $nic_fields{nic} = $row->{ifname};
    $nic_fields{mac} = $row->{address} if defined $row->{address};

    for my $addr (@{$row->{addr_info}})
    {
      # Only IPv6
      next if $addr->{family} ne "inet6";
      # ignore temporary ipv6 addresses (privacy extensions)
      next if $addr->{temporary};

      my $ip = $addr->{local};
      my $length = $addr->{prefixlen};
      my $id_length = 128 - $length;

      my $prefix = ip_to_prefix($ip, $length);
      # Append brackets unless we have a host address without network
      $prefix .= "::" unless $length == 128;

      my $raw_suffix = raw_suffix_from_ip $ip, $id_length;
      my $suffix = ip_to_suffix $ip, $id_length;

      my %addr_fields = %nic_fields;
      $addr_fields{ip} = Net::IP::ip_compress_address $ip, 6;
      $addr_fields{net} = $addr_fields{prefix} = Net::IP::ip_compress_address($prefix, 6) // $ip;

      # avoid removing of short group if we're dealing with a suffix starting with zero
      if (substr($raw_suffix, 0, 16) !~ /^[0]{16}/)
      {
        $addr_fields{iid} = ($suffix =~ s/^:://gr);
      }
      else
      {
        $addr_fields{iid} = $suffix;
      }
      $addr_fields{suffix} = $addr_fields{iid};

      $addr_fields{bits} = $addr_fields{length} = $length;
      $addr_fields{scope} = $addr->{scope};
      my $linklocal = ip_in_net "fe80::/10", "$ip/128";
      my $uniquelocal = ip_in_net "fc00::/7", "$ip/128";

      my $time = time;
    
      $addr_fields{valid} = $time + $addr->{valid_life_time} if defined $addr->{valid_life_time};
      $addr_fields{valid} //= "forever";
      $addr_fields{valleft} = $addr->{valid_life_time} // "forever";

      $addr_fields{preferred} = $time + $addr if defined $addr->{preferred_life_time};
      $addr_fields{preferred} //= "forever";
      $addr_fields{prefleft} = $addr->{preferred_life_time} // "forever";

      # default to global scope as wanted by rfc
      my $global = 1;
      $global = 0 if $linklocal or $uniquelocal;

      if ($opt{lan} and !defined $lan_interfaces{$addr_fields{nic}})
      {
        next;
      }
 
      if ($opt{wan} and defined $lan_interfaces{$addr_fields{nic}})
      {
        next;
      }

      next if $global and !$opt{global};
      next if $linklocal and !$opt{linklocal};
      next if $uniquelocal and !$opt{uniquelocal};

      push @out, grep s{\w+}{$addr_fields{$&} // $&}eg, "$opt{format}";
    }
  }
}

@out = sort +uniq @out;

print $opt{nonl} ? "@out": map "$_\n", @out unless $opt{quiet};

exit !@out;
