#!/usr/bin/perl -CSDAL
use warnings;
use strict;
use utf8;
use File::Basename;
use Getopt::Long;
use IServ::Dialog qw(msgbox confirm inputbox menu checklist);
use IServ::IConf;
use Path::Tiny;
use Regexp::IPv6;
use Socket;
use Tie::IxHash;

my $mask_ip = qr/($Regexp::IPv6::IPv6_re(|\/(\d+)))/;
my $mask_ips = qr/$mask_ip(?: $mask_ip)*/;
my $mask_netmask = qr/(([1]([0-1][0-9]|[2][0-8]))|[1-9][0-9]|[0-9])/;
my $TITLE = "Netzwerkschnittstellen (IPv6)";
my $cfg = "/etc/network/interfaces.d/ipv6";
my $fn_delegation = "/var/lib/iserv/config/ipv6-delegation-interfaces.list";
my $fn_dhcp = "/var/lib/iserv/config/ipv6-dhcp-interfaces.list";

my %dhcp_interfaces;
my %delegation_interfaces;

$IServ::Dialog::backtitle = "IServ-Konfiguration > $TITLE";

sub unique(@) { sort keys %{{map {($_, undef)} @_}} }
sub subtract(\@@) { my ($a, @b) = @_; grep {my $a = $_; !grep {$_ eq $a} @b;} @$a; }

sub getproc(@)
{
  local $ENV{LC_ALL} = "C";
  open FP, "-|", map { defined $_? $_: "" } @_ or die $!;
  my @res = <FP>;
  close FP;
  wantarray? @res: join "", @res;
}

{
  my $cache;
  my $ids = "/usr/share/misc/pci.ids";
  sub pci_parse()
  {
    return $cache if $cache;
    return unless -f $ids;
    my ($v, $d);
    my %res;
    local $_;
    open FP, "<", $ids or die $!;
    while (<FP>)
    {
      next if /^#|^$/;
      if (/^(\w{4})  (.+)$/)
      {
        $v = $1;
        $res{$v}{_} = $2;
      }
      elsif (/^\t(\w{4})  (.+)$/)
      {
        $d = $1;
        $res{$v}{$d}{_} = $2;
      }
      elsif (/^\t\t(\w{4}) (\w{4})  (.+)$/)
      {
        $res{$v}{$d}{$1}{$2}{_} = $3;
      }
    }
    close FP;
    $cache = \%res;
  }
}

sub pci_lookup(@)
{
  my $d = pci_parse;
  my @res;
  while (@_)
  {
    my $key = shift;
    push @res, $d->{$key}{_} if $d->{$key}{_};
    $d = $d->{$key};
  }
  @res? join " ", @res: undef;
}

sub if_hardware($)
{
  my ($if) = @_;
  my $dir = "/sys/class/net/$if/device";
  my @ids;
  for (grep -f "$dir/$_", qw(vendor device subsystem_vendor subsystem_device))
  {
    push @ids, (path("$dir/$_")->slurp_utf8) =~ /0x(.+)/g;
  }
  pci_lookup @ids;
}

sub if_mac($)
{
  my ($if) = @_;
  my $fn = "/sys/class/net/$if/address";
  return unless -f $fn;
  my $res = path($fn)->slurp_utf8;
  chomp $res;
  $res;
}

sub if_status($)
{
  my ($if) = @_;
  my ($key, %res);
  tie %res, "Tie::IxHash";
  for (getproc "ethtool", $if)
  {
    if (/^\t(.+):\s+(.*)/)
    {
      $key = $1;
      $res{$key} = $2;
    }
    elsif (/^\t\s+(.*)/)
    {
      $res{$key} .= $1;
    }
  }
  return %res if wantarray;

  my @res;
  push @res, "no link" unless
    defined $res{"Link detected"} and $res{"Link detected"} eq "yes";
  push @res, $res{Speed} if defined $res{Speed};
  push @res, "$res{Duplex} duplex" if defined $res{Duplex};
  return @res? join ", ", @res: undef;
}

sub ifs_parse()
{
  my $stanza;

  my $if;
  my %conf;
  for (path($cfg)->lines_utf8)
  {
    s/^\s+|\s$//g;
    next if /^#|^$/;
    my ($k, @v) = split /\s+/, $_;
    if ($k eq "auto" or $k =~ /^allow-/)
    {
      map $stanza->{"_$k"} = 1, @v;
    }
    elsif ($k eq "mapping")
    {
      $if = undef;
      $stanza = undef;
    }
    elsif ($k eq "iface")
    {
      $if = shift @v;
      $stanza = {};
      push @{ $conf{$if} }, $stanza;

      ($stanza->{_family}, $stanza->{_method}) = @v;
    }
    elsif ($if and $stanza)
    {
      $stanza->{$k} = "@v";
    }
  }

  \%conf;
}

{
  my $done;
  sub ifs_backup()
  {
    return if $done;
    IServ::IConf::backup $cfg;
    $done = 1;
  }
}

sub ifs_write(%)
{
  my %new = @_;
  my @in = path($cfg)->lines_utf8;
  my $orig = join "", @in;
  my $mode = "";
  my $out = "";
  for (@in)
  {
    my $line = $_;
    $line =~ s/^\s+|\s$//g;
    my @v = split /\s+/, $line;
    my $k = @v? shift @v: "";
    if ($k eq "auto" or $k =~ /^allow-/)
    {
      @v = subtract @v, grep { not defined $new{$_} } keys %new;
      @v = subtract @v, grep { defined $new{$_} and $new{$_} eq "" } keys %new;
      next unless @v;
      $_ = "$k @v\n";
    }
    elsif ($k eq "mapping")
    {
      $mode = "";
    }
    elsif ($k eq "iface")
    {
      my $if = shift @v;
      if (not exists $new{$if})
      {
        $mode = "";
      }
      elsif (defined $new{$if})
      {
        $mode = "subst";
        $_ = $new{$if};
        $new{$if} = "";
      }
      else
      {
        $mode = "del";
        next;
      }
    }
    else
    {
      next if $mode eq "del" or $mode eq "subst" and length $k;
    }

    $out .= $_;
  }

  for (grep $new{$_}, keys %new)
  {
    $out =~ s/\s*$/\n\nauto $_\n$new{$_}\n/s;
  }

  if ($out ne $orig)
  {
    ifs_backup;
    path($cfg)->spew_utf8($out);
  }
}

sub if_deps($%)
{
  my ($if, %conf) = @_;
  sort grep /^$if(?!>\w)/, keys %conf;
}

sub iwlist_scan($)
{
  my ($if) = @_;
  # firmware seems to be loaded on first if up
  unless (grep /^$if\s/, getproc "ifconfig")
  {
    system "ifconfig", $if, "0.0.0.0";
  }
  my (%res, $ssid);
  for (getproc "iwlist", $if, "scan")
  {
    s/^\s+// or next;
    s/\s+$//;
    $ssid = undef if s/^Cell \d+ - //;
    $ssid = $1 if /^ESSID:"(.*)"$/;
    push @{$res{$ssid}}, "$1%" if /^Signal level=(.*)\/100/;
  }
  %res;
}

sub system_v(@)
{
  print "@_\n";
  system @_;
}

my %conf = %{( ifs_parse )};

sub menu_method($;$)
{
  my ($if, $sel) = @_;
  my $method = $sel;

  my $new_method;
  while (not defined $new_method)
  {
    $new_method = menu "Method", $sel, "static" => "statisch", "auto" => "Automatisch",
      "dhcp" => "DHCP", "widedhcp" => "DHCP mit Präfix", "delg" => "Präfix-Deligierung";
    last if not defined $new_method;

    my $widedhcp_if;

    IF:
    for my $if (keys %conf)
    {
      for (@{ $conf{$if} })
      {
        if ($_->{_method} eq "widedhcp")
        {
          $widedhcp_if = $if;
          last IF;
        }
      }
    }

    if ($new_method eq "widedhcp")
    {
      if (defined $widedhcp_if and $widedhcp_if ne $if)
      {
        msgbox "DHCP mit Präfix ist bereits auf Schnittstelle $widedhcp_if konfiguriert.";
        undef $new_method;
        next;
      }
    }
    elsif ($new_method eq "delg")
    {
      unless (defined $widedhcp_if)
      {
        msgbox "Präfix-Delegierung benötigt eine Schnittstelle, die für \"DHCP mit Präfix\" konfiguriert ist.";
        undef $new_method;
      }
    }
    $method = $new_method;
  }

  $method;
}

if (-f $fn_dhcp)
{
  %dhcp_interfaces = map { $_ => 1 } split /\n/, path($fn_dhcp)->slurp_utf8;
}

if (-f $fn_delegation)
{
  %delegation_interfaces = map { $_ => 1 } split /\n/, path($fn_delegation)->slurp_utf8;
}

my $sel;
my %changes;
while (1)
{
  for my $if (keys %conf)
  {
    my @if = @{ $conf{$if} };

    for my $i (0..$#if)
    {
      if (defined $dhcp_interfaces{$if}
            and $conf{$if}[$i]{_family} eq "inet6"
            and $conf{$if}[$i]{_method} eq "manual")
      {
        $conf{$if}[$i]{_method} = "widedhcp";
      }

      if (defined $delegation_interfaces{$if}
            and $conf{$if}[$i]{_family} eq "inet6"
            and $conf{$if}[$i]{_method} eq "manual")
      {
        $conf{$if}[$i]{_method} = "delg";
      }
    }
  }

  my %ifs;
  for my $if (keys %conf)
  {
    my @if = @{ $conf{$if} };

    for my $i (0..$#if)
    {
      $ifs{$if} = 1 if $if[$i]{_family} eq "inet6"
        and $if[$i]{_method} =~ /^static$|^dhcp|^manual|^auto|^delg|^widedhcp$/;
    }
  }

  my @menu;
  push @menu, $_ => "Netzwerkschnittstelle $_" for sort keys %ifs;
  push @menu, "-" => "-";
  push @menu, "add" => "Hinzufügen";
  push @menu, "remove" => "Entfernen" if keys %ifs;
  %changes?
    push @menu, "save" => "Speichern und beenden":
    push @menu, "exit" => "Beenden";
  $sel = menu "Interfaces", $sel, @menu;

  if (!$sel or $sel eq "exit")
  {
    last;
  }
  elsif ($sel eq "save")
  {
    # nicht abbrechen bei Abbruch der SSH-Verbindung
    $SIG{HUP} = 'IGNORE';
    my @down = reverse sort keys %changes;
    system_v "ifdown", "--force", $_ for @down;
    # ifdown deaktiviert das Interface nur, löscht aber nicht die Einstellungen
    system_v "ifconfig", $_, "0.0.0.0", "down" for grep /^\w+$/, @down;
    print "write $cfg\n";
    ifs_write %changes;
    print "write $fn_dhcp\n";
    path($fn_dhcp)->spew_utf8(join("\n", sort keys %dhcp_interfaces) . "\n");
    print "write $fn_delegation\n";
    path($fn_delegation)->spew_utf8(join("\n", sort keys %delegation_interfaces) ."\n");
    if (!keys %dhcp_interfaces)
    {
      # stop wide if no dhcp interfaces are configured
      system_v "iservchk", "wide";
    }

    my @up = grep defined $changes{$_}, sort keys %changes;
    system_v "ifup", "--force", $_ for @up;
    my @services;
    push @services, "wide";

    my $want = {"apache" => "40apache", "bind" => "12bind", "dhcpd6" => "40dhcpd6",
      "defaults" => "90defaults", "network" => "11network", "radvd" => "40radvd", "squid" => "40squid"};

    for my $service (keys %$want)
    {
      next if not -f "/etc/iserv/chk.d/".$want->{$service};
      push @services, $service;
    }

    system_v "iservchk", sort @services;
    last;
  }
  elsif ($sel eq "remove")
  {
    if (my @rem = checklist "Entfernen", map {($_, "Netzwerkschnittstelle $_", 0)} sort keys %ifs)
    {
      @rem = unique map { if_deps $_, %conf } @rem;
      if (confirm join "\n", "Remove the following interfaces?", @rem)
      {
        $changes{$_} = undef for @rem;
        delete $conf{$_} for @rem;
        next;
      }
    }
  }
  elsif ($sel ne "-")
  {
    my ($if, $changes, @def, $new_stanza);
    if ($sel eq "add")
    {
      my @menu;
      push @menu, $_, if_hardware $_ || "Netzwerkkarte"
          for map { basename $_ }
          glob "/sys/class/net/{eth,wlan,en,wl,ww}*";
      push @menu, "custom", "Benutzerdefiniert";
      $if = menu "Interface", undef, @menu;
      next unless defined $if;

      if ($if eq "custom")
      {
        $if = inputbox "Interface" or next;
      }

      my $method = menu_method $if;
      next unless defined $method;

      $new_stanza = ();
      $new_stanza->{_family} = "inet6";
      $new_stanza->{_method} = $method;
      $changes++;
    }
    else
    {
      $if = $sel;
    }
    my @ifs;
    @ifs = @{ $conf{$if} } if defined $conf{$if};
    for my $i (0..$#ifs)
    {
      my $stanza;
      $stanza->{$_} = $conf{$if}[$i]{$_} for keys %{$conf{$if}[$i]};
      push @def, $stanza;
    }
    push @def, $new_stanza if defined $new_stanza;

    while (1)
    {
      my (@menu, $stanza_key);

      if (defined $new_stanza)
      {
        $stanza_key = $#def;
        undef $new_stanza;
      } else
      {
        push @menu, $_ => $def[$_]{address} // $def[$_]{_method} for 0..$#def;
        push @menu, "-" => "-";
        push @menu, "back" => "Zurück";

        $stanza_key = menu "Netzwerkschnittstelle $if", $stanza_key, @menu;
      }

      if (not defined $stanza_key or $stanza_key eq "back")
      {
        last;
      }
      elsif ($stanza_key ne "-")
      {
        my %def;
        tie %def, "Tie::IxHash";
        %def = %{ $def[$stanza_key] };
        my %stat;
        tie %stat, "Tie::IxHash";
        $stat{hardware} = if_hardware $if;
        $stat{mac} = if_mac $if;

        my $attr;
        while (1)
        {
          my %mask;
          tie %mask, "Tie::IxHash";
          if ($def{_method} eq "static")
          {
            $mask{"address"} = qr/^$mask_ip$/;
            $mask{"gateway"} = qr/^$mask_ip?$/;
            $mask{"dns-nameservers"} = qr/^$mask_ips?$/;
            $mask{"netmask"} = qr/^$mask_netmask?$/;
          }
          if ($if =~ /^(wlan|wl)/)
          {
            $mask{"wpa-ssid"} = qr/.+/;
            $mask{"wpa-psk"} = qr/.+/;
          }

          $stat{status} = if_status $if;

          my @menu;
          push @menu, $_ => $stat{$_} for grep defined $stat{$_}, keys %stat;
          push @menu, "-" => "-" if @menu;
          push @menu, "method" => $def{_method};
          # output default fields in order
          push @menu, $_ => $def{$_} for keys %mask;
          # output other fields sorted
          push @menu, $_ => $def{$_} for grep !/^_/ && !$mask{$_}, sort keys %def;
          push @menu, "-" => "-";
          push @menu, "add" => "Benutzerdefiniertes Attribut";
          $changes?
              push @menu, "save" => "Speichern und zurück":
              push @menu, "exit" => "Zurück";
          $attr = menu "Interface $if", $attr, @menu;

          if (!$attr or $attr eq "exit")
          {
            last;
          }
          elsif ($attr eq "save")
          {
            # check values
            if (my @inv = grep { ($def{$_} // "") !~ $mask{$_} } sort keys %mask)
            {
              msgbox "Ungültig: @inv";
              next;
            }
            if (defined $def{address})
            {
              if (defined $def{gateway})
              {
                if ($def{gateway} eq $def{address})
                {
                  msgbox "Gateway darf nicht der Server selbst sein.";
                  next;
                }
              }
              if (defined $def{"dns-nameservers"})
              {
                if ($def{"dns-nameservers"} eq $def{address})
                {
                  msgbox "Nameserver darf nicht der Server selbst sein.";
                  next;
                }
              }
            }
            # store values
            undef $conf{$if}[$stanza_key];
            $conf{$if}[$stanza_key]{$_} = $def{$_} for keys %def;

            undef $def[$stanza_key];
            $def[$stanza_key]{$_} = $def{$_} for keys %def;

            # handle automagically methods (widedhcp and delg)
            if ($conf{$if}[$stanza_key]{_method} eq "widedhcp")
            {
              $dhcp_interfaces{$if} = 1;
              $def[$stanza_key]{_method} = "manual";
            }
            else
            {
              my $dhcp_found = 0;
              my @if_conf = @{ $conf{$if} };

              for my $stanza_key (0..$#if_conf)
              {
                do { $dhcp_found = 1; last; } if $conf{$if}[$stanza_key]{_method} eq "widedhcp";
              }

              delete $dhcp_interfaces{$if} unless $dhcp_found;
            }

            if ($conf{$if}[$stanza_key]{_method} eq "delg")
            {
              $delegation_interfaces{$if} = 1;
              $def[$stanza_key]{_method} = "manual";
            }
            else
            {
              my $delg_found = 0;
              my @if_conf = @{ $conf{$if} };

              for my $stanza_key (0..$#if_conf)
              {
                do { $delg_found = 1; last; } if $conf{$if}[$stanza_key]{_method} eq "delg";
              }

              delete $delegation_interfaces{$if} unless $delg_found;
            }

            $changes{$if} = "";
            for my $i (0..$#def)
            {
              my %def = %{ $def[$i] };
              $changes{$if} .= "iface $if $def{_family} $def{_method}\n".
              (join "", map "\t$_ $def{$_}\n", grep !/^_/, keys %def);
            }

            # copy current config to defintion to ensure correct displaying
            # (e.g. manual + delg => delg instead of manual as method)
            $def[$stanza_key] = { %{ $conf{$if}[$stanza_key] } };
            last;
          }
          elsif ($attr eq "status")
          {
            my %stat;
            tie %stat, "Tie::IxHash";
            %stat = if_status $if;
            next unless %stat;
            my $sel;
            while (1)
            {
              $sel = menu "Status of $if", $sel, %stat, "-", "-", "exit", "Beenden";
              if (!$sel or $sel eq "exit")
              {
                last;
              }
              elsif (defined $stat{$sel} and length $stat{$sel} > 48)
              {
                msgbox "$sel: $stat{$sel}";
              }
            }
          }
          elsif ($attr eq "method")
          {
            my $method = menu_method $if, $def{"_method"};
            next unless defined $method;
            $def{"_method"} = $method;
            if ($method eq "dhcp")
            {
              delete $def{$_} for qw(address gateway dns-nameservers netmask);
            }
            $changes++;
          }
          elsif ($attr eq "wpa-ssid")
          {
            my @menu;
            my %arr = iwlist_scan $if;
            push @menu, map { ($_, sprintf "Signal %s", join " + ", @{$arr{$_}}) }
              sort { lc $a cmp lc $b } keys %arr;
            push @menu, "custom" => "Benutzerdefiniert";
            my $wpa_ssid = menu "Method", $def{"wpa-ssid"}, @menu;
            next unless defined $wpa_ssid;
            if ($wpa_ssid eq "custom")
            {
              $wpa_ssid = inputbox "SSID" or next;
            }
            $def{"wpa-ssid"} = $wpa_ssid;
            $changes++;
          }
          elsif ($attr eq "add" or exists $def{$attr} or $mask{$attr})
          {
            if ($attr eq "add")
            {
              $attr = inputbox "Attribut";
              next unless defined $attr;
            }
            my $v = inputbox $attr, $def{$attr}, $mask{$attr};
            next unless defined $v;
            length $v? $def{$attr} = $v: delete $def{$attr};
            $changes++;
            if (defined $v and $v)
            {
              $def{"dns-nameservers"} = $v
                      if $attr eq "gateway" and not defined $def{"dns-nameservers"};
            }
          }
          elsif (defined $stat{$attr} and length $stat{$attr} > 48)
          {
            msgbox $stat{$attr};
          }
        }
      }
    }
  }
}

